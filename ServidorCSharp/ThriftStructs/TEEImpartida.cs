/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftStructs
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TEEImpartida : TBase
  {
    private int _idEEImpartida;
    private int _idEE;
    private int _idCuenta;

    public int IdEEImpartida
    {
      get
      {
        return _idEEImpartida;
      }
      set
      {
        __isset.idEEImpartida = true;
        this._idEEImpartida = value;
      }
    }

    public int IdEE
    {
      get
      {
        return _idEE;
      }
      set
      {
        __isset.idEE = true;
        this._idEE = value;
      }
    }

    public int IdCuenta
    {
      get
      {
        return _idCuenta;
      }
      set
      {
        __isset.idCuenta = true;
        this._idCuenta = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool idEEImpartida;
      public bool idEE;
      public bool idCuenta;
    }

    public TEEImpartida() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                IdEEImpartida = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                IdEE = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                IdCuenta = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TEEImpartida");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.idEEImpartida) {
          field.Name = "idEEImpartida";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IdEEImpartida);
          oprot.WriteFieldEnd();
        }
        if (__isset.idEE) {
          field.Name = "idEE";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IdEE);
          oprot.WriteFieldEnd();
        }
        if (__isset.idCuenta) {
          field.Name = "idCuenta";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(IdCuenta);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TEEImpartida(");
      bool __first = true;
      if (__isset.idEEImpartida) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdEEImpartida: ");
        __sb.Append(IdEEImpartida);
      }
      if (__isset.idEE) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdEE: ");
        __sb.Append(IdEE);
      }
      if (__isset.idCuenta) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdCuenta: ");
        __sb.Append(IdCuenta);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
