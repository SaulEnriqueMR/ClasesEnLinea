/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using ThriftStructs;

namespace ThriftServices
{
    public partial class ExperienciaEducativaService
    {
        public interface ISync
        {
            string registrarEE(TExperienciaEducativa nuevaEE);
            List<TExperienciaEducativa> obtenerEE();
            string registrarEEParaImpartir(TEEImpartida nuevaEEImpartida);
            string registrarEEParaAsistir(TEEAsistencia nuevaEEAsistencia);
            List<TEEImpartidaView> obtenerEEImpartidas(int idCuenta);
            List<TEEAsistenciaView> obtenerEEAsistencia(int idCuenta);
            List<TEEImpartidaView> obtenerTodasEEImpartidas(int idCuenta);
        }

        public interface Iface : ISync
        {
#if SILVERLIGHT
      IAsyncResult Begin_registrarEE(AsyncCallback callback, object state, TExperienciaEducativa nuevaEE);
      string End_registrarEE(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_obtenerEE(AsyncCallback callback, object state);
      List<TExperienciaEducativa> End_obtenerEE(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_registrarEEParaImpartir(AsyncCallback callback, object state, TEEImpartida nuevaEEImpartida);
      string End_registrarEEParaImpartir(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_registrarEEParaAsistir(AsyncCallback callback, object state, TEEAsistencia nuevaEEAsistencia);
      string End_registrarEEParaAsistir(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_obtenerEEImpartidas(AsyncCallback callback, object state, int idCuenta);
      List<TEEImpartidaView> End_obtenerEEImpartidas(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_obtenerEEAsistencia(AsyncCallback callback, object state, int idCuenta);
      List<TEEAsistenciaView> End_obtenerEEAsistencia(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_obtenerTodasEEImpartidas(AsyncCallback callback, object state, int idCuenta);
      List<TEEImpartidaView> End_obtenerTodasEEImpartidas(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
      public IAsyncResult Begin_registrarEE(AsyncCallback callback, object state, TExperienciaEducativa nuevaEE)
      {
        return send_registrarEE(callback, state, nuevaEE);
      }

      public string End_registrarEE(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registrarEE();
      }

#endif

            public string registrarEE(TExperienciaEducativa nuevaEE)
            {
#if !SILVERLIGHT
                send_registrarEE(nuevaEE);
                return recv_registrarEE();

#else
        var asyncResult = Begin_registrarEE(null, null, nuevaEE);
        return End_registrarEE(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_registrarEE(AsyncCallback callback, object state, TExperienciaEducativa nuevaEE)
#else
            public void send_registrarEE(TExperienciaEducativa nuevaEE)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("registrarEE", TMessageType.Call, seqid_));
                registrarEE_args args = new registrarEE_args();
                args.NuevaEE = nuevaEE;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_registrarEE()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                registrarEE_result result = new registrarEE_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registrarEE failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_obtenerEE(AsyncCallback callback, object state)
      {
        return send_obtenerEE(callback, state);
      }

      public List<TExperienciaEducativa> End_obtenerEE(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_obtenerEE();
      }

#endif

            public List<TExperienciaEducativa> obtenerEE()
            {
#if !SILVERLIGHT
                send_obtenerEE();
                return recv_obtenerEE();

#else
        var asyncResult = Begin_obtenerEE(null, null);
        return End_obtenerEE(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_obtenerEE(AsyncCallback callback, object state)
#else
            public void send_obtenerEE()
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("obtenerEE", TMessageType.Call, seqid_));
                obtenerEE_args args = new obtenerEE_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<TExperienciaEducativa> recv_obtenerEE()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                obtenerEE_result result = new obtenerEE_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "obtenerEE failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_registrarEEParaImpartir(AsyncCallback callback, object state, TEEImpartida nuevaEEImpartida)
      {
        return send_registrarEEParaImpartir(callback, state, nuevaEEImpartida);
      }

      public string End_registrarEEParaImpartir(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registrarEEParaImpartir();
      }

#endif

            public string registrarEEParaImpartir(TEEImpartida nuevaEEImpartida)
            {
#if !SILVERLIGHT
                send_registrarEEParaImpartir(nuevaEEImpartida);
                return recv_registrarEEParaImpartir();

#else
        var asyncResult = Begin_registrarEEParaImpartir(null, null, nuevaEEImpartida);
        return End_registrarEEParaImpartir(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_registrarEEParaImpartir(AsyncCallback callback, object state, TEEImpartida nuevaEEImpartida)
#else
            public void send_registrarEEParaImpartir(TEEImpartida nuevaEEImpartida)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("registrarEEParaImpartir", TMessageType.Call, seqid_));
                registrarEEParaImpartir_args args = new registrarEEParaImpartir_args();
                args.NuevaEEImpartida = nuevaEEImpartida;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_registrarEEParaImpartir()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                registrarEEParaImpartir_result result = new registrarEEParaImpartir_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registrarEEParaImpartir failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_registrarEEParaAsistir(AsyncCallback callback, object state, TEEAsistencia nuevaEEAsistencia)
      {
        return send_registrarEEParaAsistir(callback, state, nuevaEEAsistencia);
      }

      public string End_registrarEEParaAsistir(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registrarEEParaAsistir();
      }

#endif

            public string registrarEEParaAsistir(TEEAsistencia nuevaEEAsistencia)
            {
#if !SILVERLIGHT
                send_registrarEEParaAsistir(nuevaEEAsistencia);
                return recv_registrarEEParaAsistir();

#else
        var asyncResult = Begin_registrarEEParaAsistir(null, null, nuevaEEAsistencia);
        return End_registrarEEParaAsistir(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_registrarEEParaAsistir(AsyncCallback callback, object state, TEEAsistencia nuevaEEAsistencia)
#else
            public void send_registrarEEParaAsistir(TEEAsistencia nuevaEEAsistencia)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("registrarEEParaAsistir", TMessageType.Call, seqid_));
                registrarEEParaAsistir_args args = new registrarEEParaAsistir_args();
                args.NuevaEEAsistencia = nuevaEEAsistencia;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_registrarEEParaAsistir()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                registrarEEParaAsistir_result result = new registrarEEParaAsistir_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registrarEEParaAsistir failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_obtenerEEImpartidas(AsyncCallback callback, object state, int idCuenta)
      {
        return send_obtenerEEImpartidas(callback, state, idCuenta);
      }

      public List<TEEImpartidaView> End_obtenerEEImpartidas(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_obtenerEEImpartidas();
      }

#endif

            public List<TEEImpartidaView> obtenerEEImpartidas(int idCuenta)
            {
#if !SILVERLIGHT
                send_obtenerEEImpartidas(idCuenta);
                return recv_obtenerEEImpartidas();

#else
        var asyncResult = Begin_obtenerEEImpartidas(null, null, idCuenta);
        return End_obtenerEEImpartidas(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_obtenerEEImpartidas(AsyncCallback callback, object state, int idCuenta)
#else
            public void send_obtenerEEImpartidas(int idCuenta)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("obtenerEEImpartidas", TMessageType.Call, seqid_));
                obtenerEEImpartidas_args args = new obtenerEEImpartidas_args();
                args.IdCuenta = idCuenta;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<TEEImpartidaView> recv_obtenerEEImpartidas()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                obtenerEEImpartidas_result result = new obtenerEEImpartidas_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "obtenerEEImpartidas failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_obtenerEEAsistencia(AsyncCallback callback, object state, int idCuenta)
      {
        return send_obtenerEEAsistencia(callback, state, idCuenta);
      }

      public List<TEEAsistenciaView> End_obtenerEEAsistencia(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_obtenerEEAsistencia();
      }

#endif

            public List<TEEAsistenciaView> obtenerEEAsistencia(int idCuenta)
            {
#if !SILVERLIGHT
                send_obtenerEEAsistencia(idCuenta);
                return recv_obtenerEEAsistencia();

#else
        var asyncResult = Begin_obtenerEEAsistencia(null, null, idCuenta);
        return End_obtenerEEAsistencia(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_obtenerEEAsistencia(AsyncCallback callback, object state, int idCuenta)
#else
            public void send_obtenerEEAsistencia(int idCuenta)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("obtenerEEAsistencia", TMessageType.Call, seqid_));
                obtenerEEAsistencia_args args = new obtenerEEAsistencia_args();
                args.IdCuenta = idCuenta;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<TEEAsistenciaView> recv_obtenerEEAsistencia()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                obtenerEEAsistencia_result result = new obtenerEEAsistencia_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "obtenerEEAsistencia failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_obtenerTodasEEImpartidas(AsyncCallback callback, object state, int idCuenta)
      {
        return send_obtenerTodasEEImpartidas(callback, state, idCuenta);
      }

      public List<TEEImpartidaView> End_obtenerTodasEEImpartidas(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_obtenerTodasEEImpartidas();
      }

#endif

            public List<TEEImpartidaView> obtenerTodasEEImpartidas(int idCuenta)
            {
#if !SILVERLIGHT
                send_obtenerTodasEEImpartidas(idCuenta);
                return recv_obtenerTodasEEImpartidas();

#else
        var asyncResult = Begin_obtenerTodasEEImpartidas(null, null, idCuenta);
        return End_obtenerTodasEEImpartidas(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_obtenerTodasEEImpartidas(AsyncCallback callback, object state, int idCuenta)
#else
            public void send_obtenerTodasEEImpartidas(int idCuenta)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("obtenerTodasEEImpartidas", TMessageType.Call, seqid_));
                obtenerTodasEEImpartidas_args args = new obtenerTodasEEImpartidas_args();
                args.IdCuenta = idCuenta;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<TEEImpartidaView> recv_obtenerTodasEEImpartidas()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                obtenerTodasEEImpartidas_result result = new obtenerTodasEEImpartidas_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "obtenerTodasEEImpartidas failed: unknown result");
            }

        }
        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["registrarEE"] = registrarEE_Process;
                processMap_["obtenerEE"] = obtenerEE_Process;
                processMap_["registrarEEParaImpartir"] = registrarEEParaImpartir_Process;
                processMap_["registrarEEParaAsistir"] = registrarEEParaAsistir_Process;
                processMap_["obtenerEEImpartidas"] = obtenerEEImpartidas_Process;
                processMap_["obtenerEEAsistencia"] = obtenerEEAsistencia_Process;
                processMap_["obtenerTodasEEImpartidas"] = obtenerTodasEEImpartidas_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void registrarEE_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                registrarEE_args args = new registrarEE_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                registrarEE_result result = new registrarEE_result();
                try
                {
                    result.Success = iface_.registrarEE(args.NuevaEE);
                    oprot.WriteMessageBegin(new TMessage("registrarEE", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("registrarEE", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void obtenerEE_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                obtenerEE_args args = new obtenerEE_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                obtenerEE_result result = new obtenerEE_result();
                try
                {
                    result.Success = iface_.obtenerEE();
                    oprot.WriteMessageBegin(new TMessage("obtenerEE", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("obtenerEE", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void registrarEEParaImpartir_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                registrarEEParaImpartir_args args = new registrarEEParaImpartir_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                registrarEEParaImpartir_result result = new registrarEEParaImpartir_result();
                try
                {
                    result.Success = iface_.registrarEEParaImpartir(args.NuevaEEImpartida);
                    oprot.WriteMessageBegin(new TMessage("registrarEEParaImpartir", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("registrarEEParaImpartir", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void registrarEEParaAsistir_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                registrarEEParaAsistir_args args = new registrarEEParaAsistir_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                registrarEEParaAsistir_result result = new registrarEEParaAsistir_result();
                try
                {
                    result.Success = iface_.registrarEEParaAsistir(args.NuevaEEAsistencia);
                    oprot.WriteMessageBegin(new TMessage("registrarEEParaAsistir", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("registrarEEParaAsistir", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void obtenerEEImpartidas_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                obtenerEEImpartidas_args args = new obtenerEEImpartidas_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                obtenerEEImpartidas_result result = new obtenerEEImpartidas_result();
                try
                {
                    result.Success = iface_.obtenerEEImpartidas(args.IdCuenta);
                    oprot.WriteMessageBegin(new TMessage("obtenerEEImpartidas", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("obtenerEEImpartidas", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void obtenerEEAsistencia_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                obtenerEEAsistencia_args args = new obtenerEEAsistencia_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                obtenerEEAsistencia_result result = new obtenerEEAsistencia_result();
                try
                {
                    result.Success = iface_.obtenerEEAsistencia(args.IdCuenta);
                    oprot.WriteMessageBegin(new TMessage("obtenerEEAsistencia", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("obtenerEEAsistencia", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void obtenerTodasEEImpartidas_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                obtenerTodasEEImpartidas_args args = new obtenerTodasEEImpartidas_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                obtenerTodasEEImpartidas_result result = new obtenerTodasEEImpartidas_result();
                try
                {
                    result.Success = iface_.obtenerTodasEEImpartidas(args.IdCuenta);
                    oprot.WriteMessageBegin(new TMessage("obtenerTodasEEImpartidas", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("obtenerTodasEEImpartidas", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEE_args : TBase
        {
            private TExperienciaEducativa _nuevaEE;

            public TExperienciaEducativa NuevaEE
            {
                get
                {
                    return _nuevaEE;
                }
                set
                {
                    __isset.nuevaEE = true;
                    this._nuevaEE = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool nuevaEE;
            }

            public registrarEE_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    NuevaEE = new TExperienciaEducativa();
                                    NuevaEE.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEE_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (NuevaEE != null && __isset.nuevaEE)
                    {
                        field.Name = "nuevaEE";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        NuevaEE.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEE_args(");
                bool __first = true;
                if (NuevaEE != null && __isset.nuevaEE)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("NuevaEE: ");
                    __sb.Append(NuevaEE == null ? "<null>" : NuevaEE.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEE_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public registrarEE_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEE_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEE_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEE_args : TBase
        {

            public obtenerEE_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEE_args");
                    oprot.WriteStructBegin(struc);
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEE_args(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEE_result : TBase
        {
            private List<TExperienciaEducativa> _success;

            public List<TExperienciaEducativa> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public obtenerEE_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<TExperienciaEducativa>();
                                        TList _list0 = iprot.ReadListBegin();
                                        for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                        {
                                            TExperienciaEducativa _elem2;
                                            _elem2 = new TExperienciaEducativa();
                                            _elem2.Read(iprot);
                                            Success.Add(_elem2);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEE_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (TExperienciaEducativa _iter3 in Success)
                                {
                                    _iter3.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEE_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEEParaImpartir_args : TBase
        {
            private TEEImpartida _nuevaEEImpartida;

            public TEEImpartida NuevaEEImpartida
            {
                get
                {
                    return _nuevaEEImpartida;
                }
                set
                {
                    __isset.nuevaEEImpartida = true;
                    this._nuevaEEImpartida = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool nuevaEEImpartida;
            }

            public registrarEEParaImpartir_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    NuevaEEImpartida = new TEEImpartida();
                                    NuevaEEImpartida.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEEParaImpartir_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (NuevaEEImpartida != null && __isset.nuevaEEImpartida)
                    {
                        field.Name = "nuevaEEImpartida";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        NuevaEEImpartida.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEEParaImpartir_args(");
                bool __first = true;
                if (NuevaEEImpartida != null && __isset.nuevaEEImpartida)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("NuevaEEImpartida: ");
                    __sb.Append(NuevaEEImpartida == null ? "<null>" : NuevaEEImpartida.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEEParaImpartir_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public registrarEEParaImpartir_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEEParaImpartir_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEEParaImpartir_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEEParaAsistir_args : TBase
        {
            private TEEAsistencia _nuevaEEAsistencia;

            public TEEAsistencia NuevaEEAsistencia
            {
                get
                {
                    return _nuevaEEAsistencia;
                }
                set
                {
                    __isset.nuevaEEAsistencia = true;
                    this._nuevaEEAsistencia = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool nuevaEEAsistencia;
            }

            public registrarEEParaAsistir_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    NuevaEEAsistencia = new TEEAsistencia();
                                    NuevaEEAsistencia.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEEParaAsistir_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (NuevaEEAsistencia != null && __isset.nuevaEEAsistencia)
                    {
                        field.Name = "nuevaEEAsistencia";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        NuevaEEAsistencia.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEEParaAsistir_args(");
                bool __first = true;
                if (NuevaEEAsistencia != null && __isset.nuevaEEAsistencia)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("NuevaEEAsistencia: ");
                    __sb.Append(NuevaEEAsistencia == null ? "<null>" : NuevaEEAsistencia.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class registrarEEParaAsistir_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public registrarEEParaAsistir_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("registrarEEParaAsistir_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("registrarEEParaAsistir_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEEImpartidas_args : TBase
        {
            private int _idCuenta;

            public int IdCuenta
            {
                get
                {
                    return _idCuenta;
                }
                set
                {
                    __isset.idCuenta = true;
                    this._idCuenta = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idCuenta;
            }

            public obtenerEEImpartidas_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdCuenta = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEEImpartidas_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idCuenta)
                    {
                        field.Name = "idCuenta";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdCuenta);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEEImpartidas_args(");
                bool __first = true;
                if (__isset.idCuenta)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdCuenta: ");
                    __sb.Append(IdCuenta);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEEImpartidas_result : TBase
        {
            private List<TEEImpartidaView> _success;

            public List<TEEImpartidaView> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public obtenerEEImpartidas_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<TEEImpartidaView>();
                                        TList _list4 = iprot.ReadListBegin();
                                        for (int _i5 = 0; _i5 < _list4.Count; ++_i5)
                                        {
                                            TEEImpartidaView _elem6;
                                            _elem6 = new TEEImpartidaView();
                                            _elem6.Read(iprot);
                                            Success.Add(_elem6);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEEImpartidas_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (TEEImpartidaView _iter7 in Success)
                                {
                                    _iter7.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEEImpartidas_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEEAsistencia_args : TBase
        {
            private int _idCuenta;

            public int IdCuenta
            {
                get
                {
                    return _idCuenta;
                }
                set
                {
                    __isset.idCuenta = true;
                    this._idCuenta = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idCuenta;
            }

            public obtenerEEAsistencia_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdCuenta = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEEAsistencia_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idCuenta)
                    {
                        field.Name = "idCuenta";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdCuenta);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEEAsistencia_args(");
                bool __first = true;
                if (__isset.idCuenta)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdCuenta: ");
                    __sb.Append(IdCuenta);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerEEAsistencia_result : TBase
        {
            private List<TEEAsistenciaView> _success;

            public List<TEEAsistenciaView> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public obtenerEEAsistencia_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<TEEAsistenciaView>();
                                        TList _list8 = iprot.ReadListBegin();
                                        for (int _i9 = 0; _i9 < _list8.Count; ++_i9)
                                        {
                                            TEEAsistenciaView _elem10;
                                            _elem10 = new TEEAsistenciaView();
                                            _elem10.Read(iprot);
                                            Success.Add(_elem10);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerEEAsistencia_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (TEEAsistenciaView _iter11 in Success)
                                {
                                    _iter11.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerEEAsistencia_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerTodasEEImpartidas_args : TBase
        {
            private int _idCuenta;

            public int IdCuenta
            {
                get
                {
                    return _idCuenta;
                }
                set
                {
                    __isset.idCuenta = true;
                    this._idCuenta = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idCuenta;
            }

            public obtenerTodasEEImpartidas_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdCuenta = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerTodasEEImpartidas_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idCuenta)
                    {
                        field.Name = "idCuenta";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdCuenta);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerTodasEEImpartidas_args(");
                bool __first = true;
                if (__isset.idCuenta)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdCuenta: ");
                    __sb.Append(IdCuenta);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class obtenerTodasEEImpartidas_result : TBase
        {
            private List<TEEImpartidaView> _success;

            public List<TEEImpartidaView> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public obtenerTodasEEImpartidas_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<TEEImpartidaView>();
                                        TList _list12 = iprot.ReadListBegin();
                                        for (int _i13 = 0; _i13 < _list12.Count; ++_i13)
                                        {
                                            TEEImpartidaView _elem14;
                                            _elem14 = new TEEImpartidaView();
                                            _elem14.Read(iprot);
                                            Success.Add(_elem14);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("obtenerTodasEEImpartidas_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (TEEImpartidaView _iter15 in Success)
                                {
                                    _iter15.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("obtenerTodasEEImpartidas_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }

    }
}
