/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using ThriftStructs;

namespace ThriftServices
{
    public partial class SalonDeClasesService
    {
        public interface ISync
        {
            string abrirSalon(int idCuenta, int idSalon);
            string unirseSalon(TConexion conexion);
            void salirSalon(int idCuenta, int idSalon);
            List<string> actualizarLista(int idSalon);
            void expulsar(int idSalon, int idMaestro, string nombre);
        }

        public interface Iface : ISync
        {
#if SILVERLIGHT
      IAsyncResult Begin_abrirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon);
      string End_abrirSalon(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_unirseSalon(AsyncCallback callback, object state, TConexion conexion);
      string End_unirseSalon(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_salirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon);
      void End_salirSalon(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_actualizarLista(AsyncCallback callback, object state, int idSalon);
      List<string> End_actualizarLista(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
      IAsyncResult Begin_expulsar(AsyncCallback callback, object state, int idSalon, int idMaestro, string nombre);
      void End_expulsar(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
      public IAsyncResult Begin_abrirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon)
      {
        return send_abrirSalon(callback, state, idCuenta, idSalon);
      }

      public string End_abrirSalon(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_abrirSalon();
      }

#endif

            public string abrirSalon(int idCuenta, int idSalon)
            {
#if !SILVERLIGHT
                send_abrirSalon(idCuenta, idSalon);
                return recv_abrirSalon();

#else
        var asyncResult = Begin_abrirSalon(null, null, idCuenta, idSalon);
        return End_abrirSalon(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_abrirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon)
#else
            public void send_abrirSalon(int idCuenta, int idSalon)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("abrirSalon", TMessageType.Call, seqid_));
                abrirSalon_args args = new abrirSalon_args();
                args.IdCuenta = idCuenta;
                args.IdSalon = idSalon;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_abrirSalon()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                abrirSalon_result result = new abrirSalon_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "abrirSalon failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_unirseSalon(AsyncCallback callback, object state, TConexion conexion)
      {
        return send_unirseSalon(callback, state, conexion);
      }

      public string End_unirseSalon(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_unirseSalon();
      }

#endif

            public string unirseSalon(TConexion conexion)
            {
#if !SILVERLIGHT
                send_unirseSalon(conexion);
                return recv_unirseSalon();

#else
        var asyncResult = Begin_unirseSalon(null, null, conexion);
        return End_unirseSalon(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_unirseSalon(AsyncCallback callback, object state, TConexion conexion)
#else
            public void send_unirseSalon(TConexion conexion)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("unirseSalon", TMessageType.Call, seqid_));
                unirseSalon_args args = new unirseSalon_args();
                args.Conexion = conexion;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_unirseSalon()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                unirseSalon_result result = new unirseSalon_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unirseSalon failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_salirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon)
      {
        return send_salirSalon(callback, state, idCuenta, idSalon);
      }

      public void End_salirSalon(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

#endif

            public void salirSalon(int idCuenta, int idSalon)
            {
#if !SILVERLIGHT
                send_salirSalon(idCuenta, idSalon);

#else
        var asyncResult = Begin_salirSalon(null, null, idCuenta, idSalon);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_salirSalon(AsyncCallback callback, object state, int idCuenta, int idSalon)
#else
            public void send_salirSalon(int idCuenta, int idSalon)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("salirSalon", TMessageType.Oneway, seqid_));
                salirSalon_args args = new salirSalon_args();
                args.IdCuenta = idCuenta;
                args.IdSalon = idSalon;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }


#if SILVERLIGHT
      public IAsyncResult Begin_actualizarLista(AsyncCallback callback, object state, int idSalon)
      {
        return send_actualizarLista(callback, state, idSalon);
      }

      public List<string> End_actualizarLista(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_actualizarLista();
      }

#endif

            public List<string> actualizarLista(int idSalon)
            {
#if !SILVERLIGHT
                send_actualizarLista(idSalon);
                return recv_actualizarLista();

#else
        var asyncResult = Begin_actualizarLista(null, null, idSalon);
        return End_actualizarLista(asyncResult);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_actualizarLista(AsyncCallback callback, object state, int idSalon)
#else
            public void send_actualizarLista(int idSalon)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("actualizarLista", TMessageType.Call, seqid_));
                actualizarLista_args args = new actualizarLista_args();
                args.IdSalon = idSalon;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public List<string> recv_actualizarLista()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                actualizarLista_result result = new actualizarLista_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "actualizarLista failed: unknown result");
            }


#if SILVERLIGHT
      public IAsyncResult Begin_expulsar(AsyncCallback callback, object state, int idSalon, int idMaestro, string nombre)
      {
        return send_expulsar(callback, state, idSalon, idMaestro, nombre);
      }

      public void End_expulsar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

#endif

            public void expulsar(int idSalon, int idMaestro, string nombre)
            {
#if !SILVERLIGHT
                send_expulsar(idSalon, idMaestro, nombre);

#else
        var asyncResult = Begin_expulsar(null, null, idSalon, idMaestro, nombre);

#endif
            }
#if SILVERLIGHT
      public IAsyncResult send_expulsar(AsyncCallback callback, object state, int idSalon, int idMaestro, string nombre)
#else
            public void send_expulsar(int idSalon, int idMaestro, string nombre)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("expulsar", TMessageType.Oneway, seqid_));
                expulsar_args args = new expulsar_args();
                args.IdSalon = idSalon;
                args.IdMaestro = idMaestro;
                args.Nombre = nombre;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

        }
        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["abrirSalon"] = abrirSalon_Process;
                processMap_["unirseSalon"] = unirseSalon_Process;
                processMap_["salirSalon"] = salirSalon_Process;
                processMap_["actualizarLista"] = actualizarLista_Process;
                processMap_["expulsar"] = expulsar_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void abrirSalon_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                abrirSalon_args args = new abrirSalon_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                abrirSalon_result result = new abrirSalon_result();
                try
                {
                    result.Success = iface_.abrirSalon(args.IdCuenta, args.IdSalon);
                    oprot.WriteMessageBegin(new TMessage("abrirSalon", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("abrirSalon", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void unirseSalon_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                unirseSalon_args args = new unirseSalon_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                unirseSalon_result result = new unirseSalon_result();
                try
                {
                    result.Success = iface_.unirseSalon(args.Conexion);
                    oprot.WriteMessageBegin(new TMessage("unirseSalon", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("unirseSalon", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void salirSalon_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                salirSalon_args args = new salirSalon_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                try
                {
                    iface_.salirSalon(args.IdCuenta, args.IdSalon);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                }
            }

            public void actualizarLista_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                actualizarLista_args args = new actualizarLista_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                actualizarLista_result result = new actualizarLista_result();
                try
                {
                    result.Success = iface_.actualizarLista(args.IdSalon);
                    oprot.WriteMessageBegin(new TMessage("actualizarLista", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("actualizarLista", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void expulsar_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                expulsar_args args = new expulsar_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                try
                {
                    iface_.expulsar(args.IdSalon, args.IdMaestro, args.Nombre);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                }
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class abrirSalon_args : TBase
        {
            private int _idCuenta;
            private int _idSalon;

            public int IdCuenta
            {
                get
                {
                    return _idCuenta;
                }
                set
                {
                    __isset.idCuenta = true;
                    this._idCuenta = value;
                }
            }

            public int IdSalon
            {
                get
                {
                    return _idSalon;
                }
                set
                {
                    __isset.idSalon = true;
                    this._idSalon = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idCuenta;
                public bool idSalon;
            }

            public abrirSalon_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdCuenta = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    IdSalon = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("abrirSalon_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idCuenta)
                    {
                        field.Name = "idCuenta";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdCuenta);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.idSalon)
                    {
                        field.Name = "idSalon";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdSalon);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("abrirSalon_args(");
                bool __first = true;
                if (__isset.idCuenta)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdCuenta: ");
                    __sb.Append(IdCuenta);
                }
                if (__isset.idSalon)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdSalon: ");
                    __sb.Append(IdSalon);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class abrirSalon_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public abrirSalon_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("abrirSalon_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("abrirSalon_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class unirseSalon_args : TBase
        {
            private TConexion _conexion;

            public TConexion Conexion
            {
                get
                {
                    return _conexion;
                }
                set
                {
                    __isset.conexion = true;
                    this._conexion = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool conexion;
            }

            public unirseSalon_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Conexion = new TConexion();
                                    Conexion.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("unirseSalon_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (Conexion != null && __isset.conexion)
                    {
                        field.Name = "conexion";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        Conexion.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("unirseSalon_args(");
                bool __first = true;
                if (Conexion != null && __isset.conexion)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Conexion: ");
                    __sb.Append(Conexion == null ? "<null>" : Conexion.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class unirseSalon_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public unirseSalon_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("unirseSalon_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("unirseSalon_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class salirSalon_args : TBase
        {
            private int _idCuenta;
            private int _idSalon;

            public int IdCuenta
            {
                get
                {
                    return _idCuenta;
                }
                set
                {
                    __isset.idCuenta = true;
                    this._idCuenta = value;
                }
            }

            public int IdSalon
            {
                get
                {
                    return _idSalon;
                }
                set
                {
                    __isset.idSalon = true;
                    this._idSalon = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idCuenta;
                public bool idSalon;
            }

            public salirSalon_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdCuenta = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    IdSalon = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("salirSalon_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idCuenta)
                    {
                        field.Name = "idCuenta";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdCuenta);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.idSalon)
                    {
                        field.Name = "idSalon";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdSalon);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("salirSalon_args(");
                bool __first = true;
                if (__isset.idCuenta)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdCuenta: ");
                    __sb.Append(IdCuenta);
                }
                if (__isset.idSalon)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdSalon: ");
                    __sb.Append(IdSalon);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class actualizarLista_args : TBase
        {
            private int _idSalon;

            public int IdSalon
            {
                get
                {
                    return _idSalon;
                }
                set
                {
                    __isset.idSalon = true;
                    this._idSalon = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idSalon;
            }

            public actualizarLista_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdSalon = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("actualizarLista_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idSalon)
                    {
                        field.Name = "idSalon";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdSalon);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("actualizarLista_args(");
                bool __first = true;
                if (__isset.idSalon)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdSalon: ");
                    __sb.Append(IdSalon);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class actualizarLista_result : TBase
        {
            private List<string> _success;

            public List<string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public actualizarLista_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<string>();
                                        TList _list0 = iprot.ReadListBegin();
                                        for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                        {
                                            string _elem2;
                                            _elem2 = iprot.ReadString();
                                            Success.Add(_elem2);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("actualizarLista_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                                foreach (string _iter3 in Success)
                                {
                                    oprot.WriteString(_iter3);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("actualizarLista_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class expulsar_args : TBase
        {
            private int _idSalon;
            private int _idMaestro;
            private string _nombre;

            public int IdSalon
            {
                get
                {
                    return _idSalon;
                }
                set
                {
                    __isset.idSalon = true;
                    this._idSalon = value;
                }
            }

            public int IdMaestro
            {
                get
                {
                    return _idMaestro;
                }
                set
                {
                    __isset.idMaestro = true;
                    this._idMaestro = value;
                }
            }

            public string Nombre
            {
                get
                {
                    return _nombre;
                }
                set
                {
                    __isset.nombre = true;
                    this._nombre = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool idSalon;
                public bool idMaestro;
                public bool nombre;
            }

            public expulsar_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    IdSalon = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    IdMaestro = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.String)
                                {
                                    Nombre = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("expulsar_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (__isset.idSalon)
                    {
                        field.Name = "idSalon";
                        field.Type = TType.I32;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdSalon);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.idMaestro)
                    {
                        field.Name = "idMaestro";
                        field.Type = TType.I32;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(IdMaestro);
                        oprot.WriteFieldEnd();
                    }
                    if (Nombre != null && __isset.nombre)
                    {
                        field.Name = "nombre";
                        field.Type = TType.String;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Nombre);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("expulsar_args(");
                bool __first = true;
                if (__isset.idSalon)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdSalon: ");
                    __sb.Append(IdSalon);
                }
                if (__isset.idMaestro)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("IdMaestro: ");
                    __sb.Append(IdMaestro);
                }
                if (Nombre != null && __isset.nombre)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Nombre: ");
                    __sb.Append(Nombre);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }

    }
}
