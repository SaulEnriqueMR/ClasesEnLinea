/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using ThriftStructs;

namespace ThriftServices
{
  public partial class CuentaService {
    public interface ISync {
      string registrarCuenta(TCuenta nuevaCuenta);
      TCuenta iniciarSesion(string usuario, string contrasena);
      string modificarCuenta(TCuenta cuentaModificada);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_registrarCuenta(AsyncCallback callback, object state, TCuenta nuevaCuenta);
      string End_registrarCuenta(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_iniciarSesion(AsyncCallback callback, object state, string usuario, string contrasena);
      TCuenta End_iniciarSesion(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_modificarCuenta(AsyncCallback callback, object state, TCuenta cuentaModificada);
      string End_modificarCuenta(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_registrarCuenta(AsyncCallback callback, object state, TCuenta nuevaCuenta)
      {
        return send_registrarCuenta(callback, state, nuevaCuenta);
      }

      public string End_registrarCuenta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_registrarCuenta();
      }

      #endif

      public string registrarCuenta(TCuenta nuevaCuenta)
      {
        #if !SILVERLIGHT
        send_registrarCuenta(nuevaCuenta);
        return recv_registrarCuenta();

        #else
        var asyncResult = Begin_registrarCuenta(null, null, nuevaCuenta);
        return End_registrarCuenta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_registrarCuenta(AsyncCallback callback, object state, TCuenta nuevaCuenta)
      #else
      public void send_registrarCuenta(TCuenta nuevaCuenta)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("registrarCuenta", TMessageType.Call, seqid_));
        registrarCuenta_args args = new registrarCuenta_args();
        args.NuevaCuenta = nuevaCuenta;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_registrarCuenta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        registrarCuenta_result result = new registrarCuenta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registrarCuenta failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_iniciarSesion(AsyncCallback callback, object state, string usuario, string contrasena)
      {
        return send_iniciarSesion(callback, state, usuario, contrasena);
      }

      public TCuenta End_iniciarSesion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_iniciarSesion();
      }

      #endif

      public TCuenta iniciarSesion(string usuario, string contrasena)
      {
        #if !SILVERLIGHT
        send_iniciarSesion(usuario, contrasena);
        return recv_iniciarSesion();

        #else
        var asyncResult = Begin_iniciarSesion(null, null, usuario, contrasena);
        return End_iniciarSesion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_iniciarSesion(AsyncCallback callback, object state, string usuario, string contrasena)
      #else
      public void send_iniciarSesion(string usuario, string contrasena)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("iniciarSesion", TMessageType.Call, seqid_));
        iniciarSesion_args args = new iniciarSesion_args();
        args.Usuario = usuario;
        args.Contrasena = contrasena;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TCuenta recv_iniciarSesion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        iniciarSesion_result result = new iniciarSesion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "iniciarSesion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_modificarCuenta(AsyncCallback callback, object state, TCuenta cuentaModificada)
      {
        return send_modificarCuenta(callback, state, cuentaModificada);
      }

      public string End_modificarCuenta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_modificarCuenta();
      }

      #endif

      public string modificarCuenta(TCuenta cuentaModificada)
      {
        #if !SILVERLIGHT
        send_modificarCuenta(cuentaModificada);
        return recv_modificarCuenta();

        #else
        var asyncResult = Begin_modificarCuenta(null, null, cuentaModificada);
        return End_modificarCuenta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_modificarCuenta(AsyncCallback callback, object state, TCuenta cuentaModificada)
      #else
      public void send_modificarCuenta(TCuenta cuentaModificada)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("modificarCuenta", TMessageType.Call, seqid_));
        modificarCuenta_args args = new modificarCuenta_args();
        args.CuentaModificada = cuentaModificada;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_modificarCuenta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        modificarCuenta_result result = new modificarCuenta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "modificarCuenta failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["registrarCuenta"] = registrarCuenta_Process;
        processMap_["iniciarSesion"] = iniciarSesion_Process;
        processMap_["modificarCuenta"] = modificarCuenta_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void registrarCuenta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        registrarCuenta_args args = new registrarCuenta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        registrarCuenta_result result = new registrarCuenta_result();
        try
        {
          result.Success = iface_.registrarCuenta(args.NuevaCuenta);
          oprot.WriteMessageBegin(new TMessage("registrarCuenta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("registrarCuenta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void iniciarSesion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        iniciarSesion_args args = new iniciarSesion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iniciarSesion_result result = new iniciarSesion_result();
        try
        {
          result.Success = iface_.iniciarSesion(args.Usuario, args.Contrasena);
          oprot.WriteMessageBegin(new TMessage("iniciarSesion", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("iniciarSesion", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void modificarCuenta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        modificarCuenta_args args = new modificarCuenta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        modificarCuenta_result result = new modificarCuenta_result();
        try
        {
          result.Success = iface_.modificarCuenta(args.CuentaModificada);
          oprot.WriteMessageBegin(new TMessage("modificarCuenta", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("modificarCuenta", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registrarCuenta_args : TBase
    {
      private TCuenta _nuevaCuenta;

      public TCuenta NuevaCuenta
      {
        get
        {
          return _nuevaCuenta;
        }
        set
        {
          __isset.nuevaCuenta = true;
          this._nuevaCuenta = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nuevaCuenta;
      }

      public registrarCuenta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  NuevaCuenta = new TCuenta();
                  NuevaCuenta.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registrarCuenta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (NuevaCuenta != null && __isset.nuevaCuenta) {
            field.Name = "nuevaCuenta";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            NuevaCuenta.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registrarCuenta_args(");
        bool __first = true;
        if (NuevaCuenta != null && __isset.nuevaCuenta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NuevaCuenta: ");
          __sb.Append(NuevaCuenta== null ? "<null>" : NuevaCuenta.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class registrarCuenta_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public registrarCuenta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("registrarCuenta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("registrarCuenta_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class iniciarSesion_args : TBase
    {
      private string _usuario;
      private string _contrasena;

      public string Usuario
      {
        get
        {
          return _usuario;
        }
        set
        {
          __isset.usuario = true;
          this._usuario = value;
        }
      }

      public string Contrasena
      {
        get
        {
          return _contrasena;
        }
        set
        {
          __isset.contrasena = true;
          this._contrasena = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool usuario;
        public bool contrasena;
      }

      public iniciarSesion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Usuario = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Contrasena = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("iniciarSesion_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Usuario != null && __isset.usuario) {
            field.Name = "usuario";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Usuario);
            oprot.WriteFieldEnd();
          }
          if (Contrasena != null && __isset.contrasena) {
            field.Name = "contrasena";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Contrasena);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("iniciarSesion_args(");
        bool __first = true;
        if (Usuario != null && __isset.usuario) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Usuario: ");
          __sb.Append(Usuario);
        }
        if (Contrasena != null && __isset.contrasena) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Contrasena: ");
          __sb.Append(Contrasena);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class iniciarSesion_result : TBase
    {
      private TCuenta _success;

      public TCuenta Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public iniciarSesion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TCuenta();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("iniciarSesion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("iniciarSesion_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificarCuenta_args : TBase
    {
      private TCuenta _cuentaModificada;

      public TCuenta CuentaModificada
      {
        get
        {
          return _cuentaModificada;
        }
        set
        {
          __isset.cuentaModificada = true;
          this._cuentaModificada = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cuentaModificada;
      }

      public modificarCuenta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  CuentaModificada = new TCuenta();
                  CuentaModificada.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificarCuenta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CuentaModificada != null && __isset.cuentaModificada) {
            field.Name = "cuentaModificada";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            CuentaModificada.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificarCuenta_args(");
        bool __first = true;
        if (CuentaModificada != null && __isset.cuentaModificada) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CuentaModificada: ");
          __sb.Append(CuentaModificada== null ? "<null>" : CuentaModificada.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class modificarCuenta_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public modificarCuenta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("modificarCuenta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("modificarCuenta_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
